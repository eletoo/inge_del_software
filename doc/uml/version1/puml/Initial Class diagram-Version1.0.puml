@startuml
skinparam ClassAttributeIconSize 0

class Applicazione{
+ gerarchie: Map<Gerarchia>
- addGerarchia(Gerarchia): void
}

abstract class User{
- username: String
- hashedPassword: String
+ <<constructor>> User(String, String)
}

class Configuratore{
+ <<constructor>> Configuratore(String, String)
}

class Printer{
+ printOnFile(): void
}

class Gerarchia{
- root: Categoria
+ <<constructor>> Gerarchia(Categoria)
+ addCategoria(Categoria): void
+ getRoot(): Categoria
+ toString(): String
}

abstract class Categoria{
- nome: String
- descrizione: String
- campiNativi: Map<String,Boolean>
+ <<constructor>> Categoria(String, String)
+ getNome(): String
+ setNome(Nome): void
+ getDescrizione(): String
+ setDescrizione(String): void
+ getCampiNativi(): Map<String, Boolean>
+ setCampiNativi(Map<String, Boolean>): void
+ toString(): String
}

class Foglia{
+ <<constructor>> Foglia(String, String)
}

class Nodo{
- categorieFiglie: List<Categoria>
+ <<constructor>> Foglia(String, String)
}

class View{
+ printMenu(): String
}
note left: "La classe View implementa tutti i metodi\nper l' interazione con l'utente.\nQuesti metodi non sono tutti riportati per \nsemplicit√† di rappresentazione"


class Model{
- userMap: Map<String, User>
+ registraConfiguratore(String, String): void
+ aggiornaCredenziali(String, String, String): void
+ getUserMap(): Map<String, User>
+ isLoginCorrect(String, String): boolean
+ isEmpty(): boolean
}

class Controller{
- data: Model
- view: View
- app: Applicazione
+ accessAsConfiguratore(): void
+ useAsConfiguratore(): void
+ creaConfiguratore(): void
+ modificaConfiguratore(String): void
}

class Main{
+ main(String): void
}

User <|-down- Configuratore
Printer <.up. Applicazione
Gerarchia "*" -left-o "1" Applicazione
Categoria -up- Gerarchia
Foglia -up-|> Categoria
Nodo "1" o-down-- "2..*" Categoria
Nodo -up-|> Categoria
Model "1" o-- "*" User
Controller -left- Model
Controller -right- Applicazione
Controller -down- View
Main -- Controller

@enduml